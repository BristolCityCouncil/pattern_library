// Generated by CoffeeScript 1.4.0
(function() {
  var Liquid, Q, Variable, _,
    __slice = [].slice;

  Liquid = require("../liquid");

  _ = require("underscore")._;

  Q = require("q");

  module.exports = Variable = (function() {

    Variable.FilterParser = RegExp("(?:" + Liquid.FilterSeparator.source + "|(?:\\s*(?!(?:" + Liquid.FilterSeparator.source + "))(?:" + Liquid.QuotedFragment.source + "|\\S+)\\s*)+)");

    function Variable(markup) {
      var filters, match, match2,
        _this = this;
      this.markup = markup;
      this.name = null;
      this.filters = [];
      if (match = RegExp("\\s*(" + Liquid.QuotedFragment.source + ")(.*)").exec(this.markup)) {
        this.name = match[1];
        if (match2 = RegExp("" + Liquid.FilterSeparator.source + "\\s*(.*)").exec(match[2])) {
          filters = Liquid.Helpers.scan(match2[1], Liquid.Variable.FilterParser);
          _(filters).forEach(function(f) {
            var filterargs, filtername, match3;
            if (match3 = /\s*(\w+)/.exec(f)) {
              filtername = match3[1];
              filterargs = Liquid.Helpers.scan(f, RegExp("(?:" + Liquid.FilterArgumentSeparator.source + "|" + Liquid.ArgumentSeparator.source + ")\\s*(" + Liquid.QuotedFragment.source + ")"));
              filterargs = _(filterargs).flatten();
              return _this.filters.push([filtername, filterargs]);
            }
          });
        }
      }
    }

    Variable.prototype.render = function(context) {
      var mapper,
        _this = this;
      if (this.name == null) {
        return '';
      }
      mapper = function(output, filter) {
        var counter, dependencies, execute, filterargs, waitingFor;
        filterargs = _(filter[1]).map(function(a) {
          return context.get(a);
        });
        dependencies = [output].concat(__slice.call(filterargs));
        waitingFor = _(dependencies).select(function(o) {
          return Q.isPromise(o);
        });
        execute = function() {
          try {
            return context.invoke.apply(context, [filter[0], output].concat(__slice.call(filterargs)));
          } catch (e) {
            if (!(e instanceof Liquid.FilterNotFound)) {
              throw e;
            }
            throw new Liquid.FilterNotFound("Error - filter '" + filter[0] + "' in '" + _this.markup + "' could not be found.");
          }
        };
        if (waitingFor.length > 0) {
          counter = waitingFor.length;
          return Liquid.async.promise(function(result) {
            var _this = this;
            return dependencies.forEach(function(k, i) {
              if (!Q.isPromise(k)) {
                return;
              }
              return k.nodeify(function(err, r) {
                if (i === 0) {
                  output = r;
                } else {
                  filterargs[i - 1] = r;
                }
                counter--;
                if (counter === 0) {
                  return result.resolve(execute());
                }
              });
            });
          });
        } else {
          return execute();
        }
      };
      return Q.when(context.get(this.name)).then(function(value) {
        return Liquid.async.reduce(_this.filters, mapper, value).then(function(value) {
          if (value instanceof Liquid.Drop) {
            if (typeof value.toString === "function") {
              value.context = context;
              return value.toString();
            } else {
              return "Liquid.Drop";
            }
          } else {
            return value;
          }
        });
      });
    };

    return Variable;

  })();

}).call(this);
