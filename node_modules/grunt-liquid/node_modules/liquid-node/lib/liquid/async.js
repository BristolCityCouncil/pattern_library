// Generated by CoffeeScript 1.4.0
(function() {
  var Async, Q, aPost, async, denodify, detector, getPosts, mapper, nodeify, reducer;

  Q = require("q");

  async = require("async");

  nodeify = function(deferred) {
    return function(err, result) {
      if (err) {
        return deferred.reject(err);
      } else {
        return deferred.resolve(result);
      }
    };
  };

  denodify = function(cb) {
    return [
      function(result) {
        return cb(null, result);
      }, function(error) {
        return cb(error);
      }
    ];
  };

  module.exports = Async = {
    forEach: function(array, callback) {
      return Async.promise(function(deferred) {
        var iterator;
        iterator = function(item, cb) {
          return Q.when(item).then(function(i) {
            return callback(i);
          }).nodeify(cb);
        };
        return async.forEachSeries(array, iterator, nodeify(deferred));
      });
    },
    map: function(array, callback) {
      return Async.promise(function(deferred) {
        var c, iterator;
        c = 0;
        iterator = function(item, cb) {
          return Q.when(item).then(function(i) {
            return callback(i, c++);
          }).nodeify(cb);
        };
        return async.mapSeries(array, iterator, nodeify(deferred));
      });
    },
    reduce: function(array, callback, memo) {
      return Async.promise(function(deferred) {
        return Q.when(memo).then(function(memo) {
          var iterator;
          iterator = function(memo, item, cb) {
            return Q.when(item).then(function(i) {
              return callback(memo, i);
            }).nodeify(cb);
          };
          return async.reduce(array, memo, iterator, nodeify(deferred));
        });
      });
    },
    some: function(array, callback) {
      return Async.promise(function(deferred) {
        var iterator;
        iterator = function(item, cb) {
          return Q.when(item).then(function(i) {
            return callback(i);
          }).then((function(v) {
            return cb(v);
          }), deferred.reject);
        };
        return async.some(array, iterator, function(r) {
          return deferred.resolve(r);
        });
      });
    },
    detect: function(array, callback) {
      return Async.promise(function(deferred) {
        var iterator;
        iterator = function(item, cb) {
          return Q.when(item).then(function(i) {
            return callback(i);
          }).then((function(v) {
            return cb(v);
          }), deferred.reject);
        };
        return async.detectSeries(array, iterator, function(r) {
          return deferred.resolve(r);
        });
      });
    },
    promise: function(callback) {
      var deferred;
      deferred = Q.defer();
      try {
        callback(deferred);
      } catch (e) {
        deferred.reject(e);
      }
      return deferred.promise;
    }
  };

  module.exports = Async;

  return;

  aPost = function() {
    return {
      getAuthor: function() {
        return async.promise(function(p) {
          return setTimeout((function() {
            return p.resolve({
              name: "Albert"
            });
          }), 0);
        });
      }
    };
  };

  getPosts = function() {
    return async.promise(function(p) {
      return setTimeout((function() {
        return p.resolve([aPost()]);
      }), 10);
    });
  };

  reducer = function(prev, next) {
    if (next === 0) {
      throw new Error("Division by zero.");
    }
    return Q.delay(1).then(function() {
      return prev / next;
    });
  };

  Async.reduce([2, 5, 10], reducer, 100).nodeify(function() {
    return console.log("Reduce 1: %j", arguments);
  });

  Async.reduce([2, 5, 0], reducer, 100).nodeify(function(err) {
    return console.log("Reduce 2: %s", err);
  });

  mapper = function(item) {
    return Q.delay(1).then(function() {
      return item + 1;
    });
  };

  Async.map([1, 2, 3], mapper).nodeify(function() {
    return console.log("Map 1: %j", arguments);
  });

  detector = function(item) {
    return Q.delay(1).then(function() {
      return item % 42 === 0;
    });
  };

  Async.some([1, 5, 7], detector).nodeify(function() {
    return console.log("Some 1: %j", arguments);
  });

  Async.some([1, 5, 42], detector).nodeify(function() {
    return console.log("Some 2: %j", arguments);
  });

  Async.detect([1, 5, 7], detector).nodeify(function() {
    return console.log("Detect 1: %j", arguments);
  });

  Async.detect([1, 5, 84], detector).nodeify(function() {
    return console.log("Detect 2: %j", arguments);
  });

  getPosts().then(function(posts) {
    console.log("Received posts.");
    return posts[0].getAuthor();
  }).then(function(v) {
    console.log("Received author.");
    return v;
  }).then(function(author) {
    return author.name;
  }).then(function(name) {
    console.log("Name: %s", name);
    return name;
  }).timeout(500).fail(function(e) {
    return console.log("Failed: %s.", e);
  }).done(function() {
    return console.log("Success.");
  });

}).call(this);
