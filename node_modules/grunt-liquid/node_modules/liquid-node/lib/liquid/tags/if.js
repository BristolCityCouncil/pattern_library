// Generated by CoffeeScript 1.4.0
(function() {
  var If, Liquid, Q, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require("../../liquid");

  _ = require("underscore")._;

  Q = require("q");

  module.exports = If = (function(_super) {
    var ExpressionsAndOperators, Syntax, SyntaxHelp;

    __extends(If, _super);

    SyntaxHelp = "Syntax Error in tag 'if' - Valid syntax: if [expression]";

    Syntax = RegExp("(" + Liquid.QuotedFragment.source + ")\\s*([=!<>a-z_]+)?\\s*(" + Liquid.QuotedFragment.source + ")?");

    ExpressionsAndOperators = RegExp("(?:\\b(?:\\s?and\\s?|\\s?or\\s?)\\b|(?:\\s*(?!\\b(?:\\s?and\\s?|\\s?or\\s?)\\b)(?:" + Liquid.QuotedFragment.source + "|\\S+)\\s*)+)");

    function If(tagName, markup, tokens) {
      this.blocks = [];
      this.pushBlock('if', markup);
      If.__super__.constructor.apply(this, arguments);
    }

    If.prototype.unknownTag = function(tag, markup, tokens) {
      if (["elsif", "else"].indexOf(tag) >= 0) {
        return this.pushBlock(tag, markup);
      } else {
        return If.__super__.unknownTag.apply(this, arguments);
      }
    };

    If.prototype.render = function(context) {
      var _this = this;
      return context.stack(function() {
        var firstBlock;
        firstBlock = Liquid.async.detect(_this.blocks, function(block) {
          return Q.when(block.evaluate(context)).then(function(ok) {
            if (block.negate) {
              return !ok;
            } else {
              return ok;
            }
          });
        });
        return firstBlock.then(function(block) {
          if (block == null) {
            return "";
          }
          return _this.renderAll(block.attachment, context);
        });
      });
    };

    If.prototype.pushBlock = function(tag, markup) {
      var block, condition, expressions, match, newCondition, operator;
      block = (function() {
        if (tag === "else") {
          return new Liquid.ElseCondition();
        } else {
          expressions = Liquid.Helpers.scan(markup, ExpressionsAndOperators);
          expressions = expressions.reverse();
          match = Syntax.exec(expressions.shift());
          if (!match) {
            throw new Liquid.SyntaxError(SyntaxHelp);
          }
          condition = (function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor, result = func.apply(child, args);
            return Object(result) === result ? result : child;
          })(Liquid.Condition, match.slice(1, 4), function(){});
          while (expressions.length > 0) {
            operator = String(expressions.shift()).trim();
            match = Syntax.exec(expressions.shift());
            if (!match) {
              throw new SyntaxError(SyntaxHelp);
            }
            newCondition = (function(func, args, ctor) {
              ctor.prototype = func.prototype;
              var child = new ctor, result = func.apply(child, args);
              return Object(result) === result ? result : child;
            })(Liquid.Condition, match.slice(1, 4), function(){});
            newCondition[operator].call(newCondition, condition);
            condition = newCondition;
          }
          return condition;
        }
      })();
      this.blocks.push(block);
      return this.nodelist = block.attach([]);
    };

    return If;

  })(Liquid.Block);

  Liquid.Template.registerTag("if", If);

}).call(this);
