// Generated by CoffeeScript 1.4.0
(function() {
  var For, Liquid, Q, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require("../../liquid");

  _ = require("underscore")._;

  Q = require("q");

  module.exports = For = (function(_super) {
    var Syntax, SyntaxHelp;

    __extends(For, _super);

    SyntaxHelp = "Syntax Error in 'for loop' - Valid syntax: for [item] in [collection]";

    Syntax = RegExp("(\\w+)\\s+in\\s+((?:" + Liquid.QuotedFragment.source + ")+)\\s*(reversed)?");

    function For(tagName, markup, tokens) {
      var match,
        _this = this;
      match = Syntax.exec(markup);
      if (match) {
        this.variableName = match[1];
        this.collectionName = match[2];
        this.name = "" + match[1] + "=" + match[2];
        this.reversed = match[3];
        this.attributes = {};
        Liquid.Helpers.scan(markup, Liquid.TagAttributes).forEach(function(attr) {
          return _this.attributes[attr[0]] = attr[1];
        });
      } else {
        throw new Liquid.SyntaxError(SyntaxHelp);
      }
      this.nodelist = this.forBlock = [];
      For.__super__.constructor.apply(this, arguments);
    }

    For.prototype.unknownTag = function(tag, markup, tokens) {
      if (tag !== "else") {
        return For.__super__.unknownTag.apply(this, arguments);
      }
      return this.nodelist = this.elseBlock = [];
    };

    For.prototype.render = function(context) {
      var _base,
        _this = this;
      (_base = context.registers)["for"] || (_base["for"] = {});
      return Q.when(context.get(this.collectionName)).then(function(collection) {
        var from, length, limit, segment, to;
        if (!(collection && collection.forEach)) {
          return _this.renderElse(context);
        }
        from = _this.attributes.offset === "continue" ? Number(context.registers["for"][_this.name]) || 0 : Number(_this.attributes.offset) || 0;
        limit = _this.attributes.limit;
        to = limit ? Number(limit) + from : null;
        segment = _this.sliceCollection(collection, from, to);
        if (segment.length === 0) {
          return _this.renderElse(context);
        }
        if (_this.reversed) {
          segment.reverse();
        }
        length = segment.length;
        context.registers["for"][_this.name] = from + segment.length;
        return context.stack(function() {
          return Liquid.async.map(segment, function(item, index) {
            try {
              context.set(_this.variableName, item);
              context.set("forloop", {
                name: _this.name,
                length: length,
                index: index + 1,
                index0: index,
                rindex: length - index,
                rindex0: length - index - 1,
                first: index === 0,
                last: index === length - 1
              });
              return _this.renderAll(_this.forBlock, context);
            } catch (e) {
              console.log("for-loop failed: %s %s", e, e.stack);
              throw e;
            }
          }).then(function(chunks) {
            return chunks.join("");
          });
        });
      });
    };

    For.prototype.sliceCollection = function(collection, from, to) {
      if (to) {
        return collection.slice(from, to);
      } else {
        return collection.slice(from);
      }
    };

    For.prototype.renderElse = function(context) {
      if (this.elseBlock) {
        return this.renderAll(this.elseBlock, context);
      } else {
        return "";
      }
    };

    return For;

  })(Liquid.Block);

  Liquid.Template.registerTag("for", For);

}).call(this);
