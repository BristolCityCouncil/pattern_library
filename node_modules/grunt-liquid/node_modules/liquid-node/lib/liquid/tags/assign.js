// Generated by CoffeeScript 1.4.0
(function() {
  var Assign, Liquid, Q,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Liquid = require("../../liquid");

  Q = require("q");

  module.exports = Assign = (function(_super) {
    var Syntax, SyntaxHelp;

    __extends(Assign, _super);

    SyntaxHelp = "Syntax Error in 'assign' - Valid syntax: assign [var] = [source]";

    Syntax = RegExp("((?:" + Liquid.VariableSignature.source + ")+)\\s*=\\s*((?:" + Liquid.QuotedFragment.source + "))");

    function Assign(tagName, markup, tokens) {
      var match;
      if (match = Syntax.exec(markup)) {
        this.to = match[1];
        this.from = match[2];
      } else {
        throw new Liquid.SyntaxError(SyntaxHelp);
      }
      Assign.__super__.constructor.apply(this, arguments);
    }

    Assign.prototype.render = function(context) {
      var value,
        _this = this;
      value = context.get(this.from);
      return Q.when(value).then(function(value) {
        Liquid.log("" + _this.from + " -> " + _this.to + ": %j", value);
        context.lastScope()[_this.to] = value;
        return '';
      });
    };

    return Assign;

  })(Liquid.Tag);

  Liquid.Template.registerTag('assign', Assign);

}).call(this);
