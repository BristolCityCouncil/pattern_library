// Generated by CoffeeScript 1.4.0
(function() {
  var Drop, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore")._;

  module.exports = Drop = (function() {

    function Drop() {}

    Drop.extend = function(impl) {
      var Droplet, klass;
      return klass = Droplet = (function(_super) {

        __extends(Droplet, _super);

        function Droplet() {
          return Droplet.__super__.constructor.apply(this, arguments);
        }

        return Droplet;

      })(Drop);
    };

    Drop.prototype.hasKey = function(key) {
      return true;
    };

    Drop.prototype.invokeDrop = function(methodOrKey) {
      if (methodOrKey && methodOrKey !== '' && (this[methodOrKey] != null)) {
        if (typeof this[methodOrKey] === "function") {
          return this[methodOrKey].call(this);
        }
      } else {
        return this.beforeMethod(methodOrKey);
      }
    };

    Drop.prototype.beforeMethod = function(method) {
      return void 0;
    };

    Drop.prototype.get = function(methodOrKey) {
      return invokeDrop(methodOrKey);
    };

    Drop.prototype.toLiquid = function() {
      return this;
    };

    return Drop;

  })();

}).call(this);
